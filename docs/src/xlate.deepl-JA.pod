=encoding utf-8

=head1 NAME

App::Greple::xlate - greple 用の翻訳サポートモジュール

=head1 SYNOPSIS

    greple -Mxlate::deepl --xlate pattern target-file

    greple -Mxlate::gpt4 --xlate pattern target-file

    greple -Mxlate --xlate-engine gpt4 --xlate pattern target-file

=head1 VERSION

Version 0.9910

=head1 DESCRIPTION

B<Greple> B<xlate> モジュールは目的のテキストブロックを見つけ、翻訳されたテキストに置き換えます。現在、DeepL (F<deepl.pm>) と ChatGPT 4.1 (F<gpt4.pm>) モジュールがバックエンドエンジンとして実装されています。

PerlのPodスタイルで書かれた文書中の通常のテキストブロックを翻訳したい場合は、C<xlate::deepl>とC<perl>モジュールを使って、次のようにB<greple>コマンドを使います：

    greple -Mxlate::deepl -Mperl --pod --re '^([\w\pP].*\n)+' --all foo.pm

このコマンドのパターン文字列C<^([ \wpP].*n)+> は、英数字と句読点で始まる連続した行を意味します。このコマンドは、翻訳される領域が強調表示されます。オプションB<--all>はテキスト全体を翻訳するのに使われます。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/select-area.png">
</p>

次にC<--xlate>オプションを加えて、選択された範囲を翻訳します。そして、必要な部分を見つけて、B<deepl>コマンドの出力で置き換えます。

デフォルトでは、原文と訳文は L<git(1)> と互換性のある "conflict marker" フォーマットで出力されます。C<ifdef>形式を使えば、L<unifdef(1)>コマンドで簡単に目的の部分を得ることができます。出力形式はB<--xlate-format>オプションで指定できます。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/format-conflict.png">
</p>

テキスト全体を翻訳したい場合は、B<--match-all>オプションを使います。これはテキスト全体にマッチするパターンC<(?s).+>を指定するショートカットです。

C<sdif>コマンドにC<-V>オプションを指定すると、コンフリクトマーカー形式のデータを並べて表示することができます。文字列単位で比較するのは意味がないので、C<--no-cdif>オプションを推奨します。テキストに色をつける必要がない場合は、C<--no-textcolor>（またはC<--no-tc>）を指定します。

    sdif -V --no-tc --no-cdif data_shishin.deepl-EN-US.cm

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/sdif-cm-view.png">
</p>

=head1 NORMALIZATION

処理は指定された単位で行われるが、空でないテキストが複数行連続している場合は、それらをまとめて1行に変換します。この処理は次のように行われる：

=over 2

=item *

各行の先頭と末尾の空白を取り除く。

=item *

行末が全角句読点の場合は、次の行と連結します。

=item *

ある行が全角文字で終わり、次の行が全角文字で始まる場合、その行を連結します。

=item *

行末または行頭が全角文字でない場合は、スペース文字を挿入して連結します。

=back

キャッシュデータは正規化されたテキストに基づいて管理されるため、正規化結果に影響を与えない範囲で修正を加えても、キャッシュされた翻訳データは有効です。

この正規化処理は、最初の（0 番目の）偶数パターンに対してのみ行われます。したがって、以下のように2つのパターンを指定した場合、1つ目のパターンにマッチするテキストは正規化処理後に処理され、2つ目のパターンにマッチするテキストには正規化処理は行われないです。

    greple -Mxlate -E normalized -E not-normalized

したがって、複数行を1行にまとめて処理するテキストには最初のパターンを使い、整形済みテキストには2番目のパターンを使う。最初のパターンにマッチするテキストがない場合は、C<(?!)>のように何もマッチしないパターンを使う。

=head1 MASKING

時々、翻訳してほしくないテキストの部分があります。例えば、マークダウン・ファイルのタグなどです。DeepL では、このような場合、除外するテキストの部分を XML タグに変換して翻訳し、翻訳完了後に復元することを推奨しています。これをサポートするために、翻訳からマスクする部分を指定できます。

    --xlate-setopt maskfile=MASKPATTERN

これはファイル `MASKPATTERN` の各行を正規表現として解釈し、それにマッチする文字列を翻訳し、処理後に元に戻します。C<#>で始まる行は無視されます。

複雑なパターンは、バックスラッシュとエスケープされた改行で複数行に書くことができます。

マスキングによってテキストがどのように変換されるかは、B<--xlate-mask>オプションで見ることができます。

このインターフェースは実験的なものであり、将来変更される可能性があります。

=head1 OPTIONS

=over 7

=item B<--xlate>

=item B<--xlate-color>

=item B<--xlate-fold>

=item B<--xlate-fold-width>=I<n> (Default: 70)

マッチした各領域に対して翻訳処理を起動します。

このオプションをつけないと、B<greple>は通常の検索コマンドとして動作します。したがって、実際の作業を開始する前に、ファイルのどの部分が翻訳の対象となるかをチェックすることができます。

コマンドの結果は標準出力されますので、必要に応じてファイルにリダイレクトするか、L<App::Greple::update>モジュールの使用を検討してください。

B<--xlate> オプションは B<--xlate-color> オプションを B<--color=never> オプションで呼び出します。

B<--xlate-fold> オプションを指定すると、変換されたテキストは指定した幅で折り返されます。デフォルトの幅は70で、B<--xlate-fold-width>オプションで設定できます。ランイン操作のために4つのカラムが予約されているので、各行は最大74文字を保持できます。

=item B<--xlate-engine>=I<engine>

使用する翻訳エンジンを指定します。C<-Mxlate::deepl>のようにエンジンモジュールを直接指定する場合は、このオプションを使う必要はありません。

現時点では、以下のエンジンが利用可能です。

=over 2

=item * B<deepl>: DeepL API

=item * B<gpt3>: gpt-3.5-turbo

=item * B<gpt4>: gpt-4.1

=item * B<gpt4o>: gpt-4o-mini

B<gpt-4o>のインターフェイスは不安定で、現時点では正しく動作することを保証できません。

=back

=item B<--xlate-labor>

=item B<--xlabor>

翻訳エンジンを呼び出す代わりに、以下の作業を行うことになります。翻訳するテキストを準備すると、クリップボードにコピーされます。フォームに貼り付け、結果をクリップボードにコピーし、returnを押してください。

=item B<--xlate-to> (Default: C<EN-US>)

ターゲット言語を指定します。B<DeepL>エンジンを使用している場合は、C<deepl languages>コマンドで利用可能な言語を取得できます。

=item B<--xlate-format>=I<format> (Default: C<conflict>)

原文と訳文の出力形式を指定します。

C<xtxt>以外の以下の書式は、翻訳される部分が行の集まりであることを前提としています。実際、行の一部だけを翻訳することは可能ですが、 C<xtxt>以外の書式を指定しても意味のある結果は得られません。

=over 4

=item B<conflict>, B<cm>

原文と訳文はL<git(1)> conflict marker形式で出力されます。

    <<<<<<< ORIGINAL
    original text
    =======
    translated Japanese text
    >>>>>>> JA

次のL<sed(1)>コマンドで元のファイルを復元できます。

    sed -e '/^<<<<<<< /d' -e '/^=======$/,/^>>>>>>> /d'

=item B<colon>, I<:::::::>

元のテキストと翻訳されたテキストは、マークダウンのカスタム・コンテナ・スタイルで出力されます。

    ::::::: ORIGINAL
    original text
    :::::::
    ::::::: JA
    translated Japanese text
    :::::::

上記のテキストはHTMLでは以下のように翻訳されます。

    <div class="ORIGINAL">
    original text
    </div>
    <div class="JA">
    translated Japanese text
    </div>

コロンの数はデフォルトでは7です。C<::::>のようにコロン列を指定すると、7コロンの代わりにそれが使われます。

=item B<ifdef>

原文と訳文はL<cpp(1)> C<#ifdef>形式で出力されます。

    #ifdef ORIGINAL
    original text
    #endif
    #ifdef JA
    translated Japanese text
    #endif

B<unifdef>コマンドで日本語のテキストだけを取り出すことができます：

    unifdef -UORIGINAL -DJA foo.ja.pm

=item B<space>

=item B<space+>

変換前のテキストと変換後のテキストは1行の空白行で区切られて出力されます。C<space+>の場合は、変換後のテキストの後に改行も出力されます。

=item B<xtxt>

形式がC<xtxt>（翻訳済みテキスト）または未知の場合は、翻訳済みテキストのみが印刷されます。

=back

=item B<--xlate-maxlen>=I<chars> (Default: 0)

APIに一度に送信するテキストの最大長を指定します。既定値は、無料のDeepLアカウント・サービスと同様に、API (B<--xlate>) では128K、クリップボード・インタフェース (B<--xlate-labor>) では5000に設定されています。Pro サービスを使用している場合は、これらの値を変更できます。

=item B<--xlate-maxline>=I<n> (Default: 0)

APIに一度に送信するテキストの最大行数を指定します。

一度に1行ずつ翻訳したい場合は、この値を1に設定します。このオプションはC<--xlate-maxlen>オプションより優先されます。

=item B<-->[B<no->]B<xlate-progress> (Default: True)

STDERR出力でリアルタイムにトランザクション結果を見ます。

=item B<--xlate-stripe>

L<App::Greple::stripe>モジュールを使うと、一致した部分をゼブラストライプで表示することができます。これは、マッチした部分が背中合わせに接続されている場合に便利です。

カラーパレットは端末の背景色に応じて切り替わります。明示的に指定したい場合は、 B<--xlate-stripe-light> または B<--xlate-stripe-dark> を使ってください。

=item B<--xlate-mask>

マスキング機能を実行し、変換されたテキストを復元せずにそのまま表示します。

=item B<--match-all>

ファイルの全文を対象領域に設定します。

=item B<--lineify-cm>

=item B<--lineify-colon>

C<cm>とC<colon>形式の場合、出力は一行ごとに分割され、整形されます。従って、行の一部だけが変換される場合、期待された結果は得られません。これらのフィルタは、行の一部を通常の行単位の出力に変換することによって破損した出力を修正します。

現在の実装では、行の複数の部分が翻訳された場合、それらは独立した行として出力されます。

=back

=head1 CACHE OPTIONS

B<xlate>モジュールは、各ファイルの翻訳テキストをキャッシュしておき、実行前に読み込むことで、サーバーに問い合わせるオーバーヘッドをなくすことができます。デフォルトのキャッシュ戦略C<auto>では、対象ファイルに対してキャッシュファイルが存在する場合にのみキャッシュデータを保持します。

B<--xlate-cache=clear>を使用して、キャッシュ管理を開始するか、既存のキャッシュデータをすべてクリーンアップします。このオプションを実行すると、キャッシュファイルが存在しない場合は新しいキャッシュファイルが作成され、その後は自動的にメンテナンスされます。

=over 7

=item --xlate-cache=I<strategy>

=over 4

=item C<auto> (Default)

キャッシュ・ファイルが存在すれば、それを維持します。

=item C<create>

空のキャッシュ・ファイルを作成して終了します。

=item C<always>, C<yes>, C<1>

対象が通常ファイルである限り、とにかくキャッシュを維持します。

=item C<clear>

最初にキャッシュデータをクリアします。

=item C<never>, C<no>, C<0>

キャッシュファイルが存在しても使用しないです。

=item C<accumulate>

デフォルトの動作では、未使用のデータはキャッシュ・ファイルから削除されます。削除せず、ファイルに残しておきたい場合は、C<accumulate>を使ってください。

=back

=item B<--xlate-update>

このオプションは、キャッシュ・ファイルを更新する必要がない場合でも、強制的に更新します。

=back

=head1 COMMAND LINE INTERFACE

配布物に含まれている C<xlate> コマンドを使えば、コマンドラインから簡単にこのモジュールを使うことができます。使い方は C<xlate> のマニュアルページを参照してください。

C<xlate>コマンドはDocker環境と協調して動作するため、手元に何もインストールされていなくても、Dockerが利用可能であれば使用することができます。C<-D>またはC<-C>オプションを使用してください。

また、様々なドキュメントスタイルに対応したmakefileが提供されているので、特別な指定なしに他言語への翻訳が可能です。C<-M>オプションを使用してください。

Docker と C<make> オプションを組み合わせて、Docker 環境で C<make> を実行することもできます。

C<xlate -C> のように実行すると、現在作業中の git リポジトリがマウントされたシェルが起動します。

詳しくはL</SEE ALSO>セクションの日本語記事を読んでください。

=head1 EMACS

EmacsエディタからC<xlate>コマンドを使うには、リポジトリに含まれるF<xlate.el>ファイルを読み込みます。C<xlate-region>関数は指定された領域を翻訳します。デフォルトの言語はC<EN-US>で、prefix引数で言語を指定できます。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/emacs.png">
</p>

=head1 ENVIRONMENT

=over 7

=item DEEPL_AUTH_KEY

DeepLサービスの認証キーを設定します。

=item OPENAI_API_KEY

OpenAIの認証キーです。

=back

=head1 INSTALL

=head2 CPANMINUS

    $ cpanm App::Greple::xlate

=head2 TOOLS

DeepLおよびChatGPT用のコマンドラインツールをインストールする必要があります。

L<https://github.com/DeepLcom/deepl-python>

L<https://github.com/tecolicom/App-gpty>

=head1 SEE ALSO

L<App::Greple::xlate> とします。

L<App::Greple::xlate::deepl> (英語)

<m id=5

=over 2

=item * L<https://hub.docker.com/r/tecolicom/xlate>

Dockerコンテナイメージ。

=item * L<https://github.com/DeepLcom/deepl-python>

DeepL Python ライブラリと CLI コマンド。

=item * L<https://github.com/openai/openai-python>

OpenAI Python ライブラリ

=item * L<https://github.com/tecolicom/App-gpty>

OpenAI コマンドラインインタフェース

=item * L<App::Greple>

ターゲット・テキスト・パターンの詳細については、B<greple> のマニュアルを参照してください。B<--inside>、B<--outside>、B<--include>、B<--exclude>オプションを使用して、マッチング範囲を制限します。

=item * L<App::Greple::update>

C<-Mupdate> モジュールを使って、B<greple> コマンドの結果によってファイルを変更することができます。

=item * L<App::sdif>

B<sdif>を使うと、B<-V>オプションでコンフリクトマーカの書式を並べて表示することができます。

=item * L<App::Greple::stripe>

B<--xlate-stripe>オプションでB<stripe>モジュールを使用します。

=back

=head2 ARTICLES

=over 2

=item * L<https://qiita.com/kaz-utashiro/items/1c1a51a4591922e18250>

DeepL APIで必要な部分だけを翻訳・置換するGrepleモジュール

=item * L<https://qiita.com/kaz-utashiro/items/a5e19736416ca183ecf6>

DeepL APIモジュールによる15言語のドキュメント生成

=item * L<https://qiita.com/kaz-utashiro/items/1b9e155d6ae0620ab4dd>

DeepL APIによる自動翻訳Docker環境

=back

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright © 2023-2025 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
